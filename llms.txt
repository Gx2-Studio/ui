# @gx2-studio/ui Component Library Documentation

This file provides comprehensive documentation for AI coding agents to correctly use the @gx2-studio/ui component library.

## Installation

```bash
npm install @gx2-studio/ui
```

## Import Pattern

```tsx
import { ComponentName } from '@gx2-studio/ui'
// For types, use type imports to avoid conflicts:
import type { ComponentProps, ComponentType } from '@gx2-studio/ui'
```

## Complete Component List with Usage

### 1. BUTTONS

#### Button
Standard button with multiple variants and sizes.
```tsx
import { Button } from '@gx2-studio/ui'

<Button 
  variant="primary" // 'primary' | 'secondary' | 'soft' | 'ghost'
  size="md" // 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  rounded="md" // 'sm' | 'md' | 'lg' | 'full'
  leadingIcon={<IconComponent />}
  trailingIcon={<IconComponent />}
  onClick={() => {}}
>
  Click me
</Button>
```

#### ButtonOnDark
Button optimized for dark backgrounds.
```tsx
import { ButtonOnDark } from '@gx2-studio/ui'

<ButtonOnDark variant="primary" size="md">
  Dark Mode Button
</ButtonOnDark>
```

#### CircularButton
Round button with icon only.
```tsx
import { CircularButton } from '@gx2-studio/ui'

<CircularButton 
  icon={<IconComponent />}
  aria-label="Action description" // Required for accessibility
  variant="primary"
  size="md"
/>
```

#### ButtonGroup
Groups multiple buttons together.
```tsx
import { ButtonGroup } from '@gx2-studio/ui'

<ButtonGroup 
  orientation="horizontal" // 'horizontal' | 'vertical'
  variant="default" // 'default' | 'segmented'
>
  <Button>First</Button>
  <Button>Second</Button>
</ButtonGroup>
```

### 2. BADGES

#### Badge
Small status indicators.
```tsx
import { Badge } from '@gx2-studio/ui'

<Badge 
  variant="flat" // 'flat' | 'pill' | 'outline'
  color="blue" // 'gray' | 'red' | 'yellow' | 'green' | 'blue' | 'indigo' | 'purple' | 'pink'
  size="sm" // 'xs' | 'sm' | 'md'
  dot={true}
  removable={true}
  onRemove={() => {}}
>
  New
</Badge>
```

#### BadgeOnDark
Badge optimized for dark backgrounds.
```tsx
import { BadgeOnDark } from '@gx2-studio/ui'

<BadgeOnDark variant="flat" color="blue" size="sm">
  Status
</BadgeOnDark>
```

### 3. AVATARS

#### Avatar
User profile image or initials.
```tsx
import { Avatar } from '@gx2-studio/ui'

<Avatar 
  src="/path/to/image.jpg"
  alt="User name"
  size="md" // 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  shape="circle" // 'circle' | 'rounded'
  initials="JD"
  status="online" // 'online' | 'offline' | 'away' | 'busy'
  statusPosition="bottom" // 'top' | 'bottom'
  notification="top-right" // 'top' | 'bottom' | 'top-right' | 'bottom-right'
  notificationColor="red" // 'gray' | 'red' | 'green' | 'blue' | 'yellow'
/>
```

#### AvatarGroup
Displays multiple avatars overlapped.
```tsx
import { AvatarGroup, Avatar } from '@gx2-studio/ui'

<AvatarGroup 
  size="md"
  max={3}
  direction="ltr" // 'ltr' | 'rtl'
>
  <Avatar src="/user1.jpg" alt="User 1" />
  <Avatar src="/user2.jpg" alt="User 2" />
  <Avatar src="/user3.jpg" alt="User 3" />
</AvatarGroup>
```

### 4. FORM INPUTS

#### TextInput
Single-line text input with various styles.
```tsx
import { TextInput } from '@gx2-studio/ui'

<TextInput 
  variant="default" // 'default' | 'pill' | 'borderless' | 'with-icon' | 'with-shortcut' | 'with-addon' | 'with-error' | 'gray-with-bottom-border' | 'inset-label' | 'overlapping-label'
  label="Email"
  placeholder="Enter email"
  helpText="We'll never share your email"
  error="Invalid email address"
  icon={<MailIcon />}
  iconPosition="left" // 'left' | 'right'
  addon="@"
  addonPosition="right"
  shortcut="âŒ˜K"
  cornerHint="Optional"
  required
/>
```

#### Textarea
Multi-line text input.
```tsx
import { Textarea } from '@gx2-studio/ui'

<Textarea 
  label="Description"
  placeholder="Enter description"
  rows={4}
  error="This field is required"
  helpText="Maximum 500 characters"
  corner={<span>0/500</span>}
/>
```

#### Select
Dropdown selection with custom styling.
```tsx
import { Select } from '@gx2-studio/ui'
import type { SelectOption } from '@gx2-studio/ui'

const options: SelectOption[] = [
  { value: '1', label: 'Option 1', disabled: false },
  { value: '2', label: 'Option 2', avatar: '/avatar.jpg' }
]

<Select 
  options={options}
  value="1"
  onChange={(value) => console.log(value)}
  placeholder="Select an option"
  label="Choose"
  error="Selection required"
  helpText="Pick one option"
/>
```

#### NativeSelect
Native HTML select element styled.
```tsx
import { NativeSelect } from '@gx2-studio/ui'

<NativeSelect 
  options={options}
  value="1"
  onChange={(value) => console.log(value)}
  label="Native Select"
/>
```

#### RadioGroup
Group of radio buttons.
```tsx
import { RadioGroup } from '@gx2-studio/ui'
import type { RadioOption } from '@gx2-studio/ui'

const options: RadioOption[] = [
  { value: '1', label: 'Option 1', description: 'Description' },
  { value: '2', label: 'Option 2', disabled: true }
]

<RadioGroup 
  options={options}
  value="1"
  onChange={(value) => console.log(value)}
  label="Select one"
  layout="vertical" // 'vertical' | 'horizontal' | 'cards'
/>
```

#### Checkbox
Single checkbox input.
```tsx
import { Checkbox } from '@gx2-studio/ui'

<Checkbox 
  label="I agree to terms"
  description="Read our terms and conditions"
  checked={true}
  onChange={(e) => console.log(e.target.checked)}
  position="left" // 'left' | 'right'
/>
```

#### Toggle
Toggle switch component.
```tsx
import { Toggle } from '@gx2-studio/ui'

<Toggle 
  checked={true}
  onChange={(checked) => console.log(checked)}
  label="Enable notifications"
  description="Receive email updates"
  labelPosition="right" // 'left' | 'right'
  size="md" // 'sm' | 'md'
  icon={<CheckIcon />}
/>
```

#### Combobox
Searchable dropdown with autocomplete.
```tsx
import { Combobox } from '@gx2-studio/ui'
import type { ComboboxOption } from '@gx2-studio/ui'

const options: ComboboxOption[] = [
  { id: '1', name: 'Option 1', description: 'Description', image: '/img.jpg' }
]

<Combobox 
  options={options}
  value={selectedOption}
  onChange={(option) => setSelectedOption(option)}
  placeholder="Search..."
  label="Select item"
  allowCustom={true}
  displayField="name"
  searchField="name"
/>
```

### 5. DROPDOWNS

#### Dropdown
Menu dropdown with actions.
```tsx
import { Dropdown } from '@gx2-studio/ui'
import type { DropdownItem } from '@gx2-studio/ui'

const items: DropdownItem[] = [
  { label: 'Edit', onClick: () => {}, icon: <EditIcon /> },
  { label: 'Delete', onClick: () => {}, divider: true },
  { label: 'Share', href: '/share' }
]

<Dropdown 
  trigger={<Button>Actions</Button>}
  items={items}
  align="right" // 'left' | 'right'
  disabled={false}
/>
```

### 6. NAVIGATION

#### Breadcrumbs
Navigation breadcrumb trail.
```tsx
import { Breadcrumbs } from '@gx2-studio/ui'
import type { BreadcrumbItem } from '@gx2-studio/ui'

const items: BreadcrumbItem[] = [
  { label: 'Home', href: '/', current: false },
  { label: 'Projects', href: '/projects', current: false },
  { label: 'Current Page', current: true }
]

<Breadcrumbs 
  items={items}
  variant="simple" // 'simple' | 'contained' | 'fullWidth'
  separator="chevron" // 'chevron' | 'slash' | 'arrow'
  showHome={true}
  homeHref="/"
  size="md" // 'sm' | 'md' | 'lg'
/>
```

#### Pagination
Page navigation controls.
```tsx
import { Pagination } from '@gx2-studio/ui'

<Pagination 
  currentPage={1}
  totalPages={10}
  onPageChange={(page) => console.log(page)}
  variant="simple" // 'simple' | 'card' | 'numbered'
  showPageNumbers={true}
  showInfo={true}
  totalItems={100}
  itemsPerPage={10}
  previousLabel="Previous"
  nextLabel="Next"
/>
```

#### Tabs
Tabbed navigation interface.
```tsx
import { Tabs } from '@gx2-studio/ui'
import type { TabItem } from '@gx2-studio/ui'

const tabs: TabItem[] = [
  { name: 'Tab 1', content: <div>Content 1</div>, icon: <Icon1 /> },
  { name: 'Tab 2', content: <div>Content 2</div>, count: 5 },
  { name: 'Tab 3', disabled: true }
]

<Tabs 
  tabs={tabs}
  activeTab="Tab 1"
  onTabChange={(tabName) => console.log(tabName)}
  variant="underline" // 'bordered' | 'underline' | 'pills' | 'simple_dark' | 'pills_gray' | 'pills_brand' | 'bar_underline' | 'full_width'
  size="md" // 'sm' | 'md' | 'lg'
  dark={false}
  fullWidth={false}
/>
```

#### Navbar
Top navigation bar.
```tsx
import { Navbar } from '@gx2-studio/ui'
import type { NavbarItem } from '@gx2-studio/ui'

const items: NavbarItem[] = [
  { id: '1', label: 'Home', href: '/', active: true },
  { id: '2', label: 'About', href: '/about', icon: <InfoIcon /> }
]

<Navbar 
  brand={{ name: 'Company', logo: '/logo.png', href: '/' }}
  items={items}
  user={{ name: 'John Doe', email: 'john@example.com', avatar: '/avatar.jpg' }}
  searchPlaceholder="Search..."
  onSearch={(query) => console.log(query)}
  variant="simple" // 'simple' | 'dark' | 'with-search' | 'with-menu-button' | 'centered-search' | 'with-quick-action' | 'column-layout'
/>
```

#### SidebarNavigation
Vertical sidebar navigation.
```tsx
import { SidebarNavigation } from '@gx2-studio/ui'
import type { SidebarNavigationSection, SidebarNavigationItem } from '@gx2-studio/ui'

const sections: SidebarNavigationSection[] = [
  {
    title: 'Main',
    items: [
      { id: '1', name: 'Dashboard', href: '/dashboard', icon: <DashIcon />, active: true },
      { id: '2', name: 'Users', href: '/users', badge: { text: '5', color: 'red' } }
    ]
  }
]

<SidebarNavigation 
  sections={sections}
  brand={{ name: 'App', logo: '/logo.png' }}
  variant="light" // 'light' | 'dark' | 'secondary' | 'brand' | 'expandable'
  width="normal" // 'narrow' | 'normal' | 'wide'
  collapsible={true}
  collapsed={false}
/>
```

#### VerticalNavigation
Vertical menu navigation.
```tsx
import { VerticalNavigation } from '@gx2-studio/ui'
import type { VerticalNavigationGroup } from '@gx2-studio/ui'

const groups: VerticalNavigationGroup[] = [
  {
    title: 'Section',
    items: [
      { id: '1', name: 'Item 1', href: '/item1', active: true },
      { id: '2', name: 'Item 2', href: '/item2', count: 3 }
    ]
  }
]

<VerticalNavigation 
  groups={groups}
  variant="simple" // 'simple' | 'on-gray' | 'with-badges' | 'with-icons' | 'with-icons-badges' | 'with-secondary'
  spacing="normal" // 'compact' | 'normal' | 'relaxed'
  showDividers={true}
/>
```

#### ProgressBar
Progress indicator with steps.
```tsx
import { ProgressBar } from '@gx2-studio/ui'
import type { ProgressStep } from '@gx2-studio/ui'

const steps: ProgressStep[] = [
  { id: '1', name: 'Step 1', status: 'complete' },
  { id: '2', name: 'Step 2', status: 'current' },
  { id: '3', name: 'Step 3', status: 'upcoming' }
]

<ProgressBar 
  steps={steps}
  variant="simple" // 'simple' | 'bullets' | 'bullets-text' | 'circles' | 'circles-text' | 'panels' | 'panels-border' | 'progress-bar'
  size="md" // 'sm' | 'md' | 'lg'
  color="indigo" // 'red' | 'green' | 'blue' | 'indigo' | 'purple'
  orientation="horizontal" // 'horizontal' | 'vertical'
/>
```

#### CommandPalette
Search/command interface overlay.
```tsx
import { CommandPalette } from '@gx2-studio/ui'
import type { CommandPaletteOption, CommandPaletteGroup } from '@gx2-studio/ui'

const options: CommandPaletteOption[] = [
  { id: '1', name: 'Search users', icon: <SearchIcon />, onSelect: () => {} }
]

const groups: CommandPaletteGroup[] = [
  { id: 'recent', name: 'Recent', options: options }
]

<CommandPalette 
  open={true}
  onClose={() => {}}
  options={options} // Or use groups
  groups={groups}
  placeholder="Search commands..."
  emptyMessage="No results found"
  variant="default" // 'default' | 'dark' | 'semi-transparent'
  showIcons={true}
  showGroups={true}
/>
```

### 7. LAYOUT

#### Card
Container with optional header and footer.
```tsx
import { Card, CardHeader, CardBody, CardFooter } from '@gx2-studio/ui'

<Card 
  variant="default" // 'default' | 'flat' | 'well' | 'outlined' | 'well-on-gray' | 'shadow'
  padding="md" // 'none' | 'sm' | 'md' | 'lg'
  bodyVariant="default" // 'default' | 'gray'
  edgeToEdge={false}
>
  <CardHeader 
    title="Card Title"
    description="Card description"
    action={<Button size="sm">Action</Button>}
    avatar={<Avatar src="/user.jpg" />}
  />
  <CardBody variant="default" padding="md">
    Card content
  </CardBody>
  <CardFooter 
    variant="default" // 'default' | 'gray'
    justify="end" // 'start' | 'center' | 'end' | 'between'
    actions={<Button>Save</Button>}
  >
    Footer content
  </CardFooter>
</Card>
```

#### Container
Layout container with max-width.
```tsx
import { Container } from '@gx2-studio/ui'

<Container 
  size="lg" // 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full'
  padding="md" // 'none' | 'sm' | 'md' | 'lg'
  center={true}
>
  Content
</Container>
```

#### Divider
Visual separator line.
```tsx
import { Divider } from '@gx2-studio/ui'

<Divider 
  variant="simple" // 'simple' | 'with-icon' | 'with-label' | 'with-title' | 'with-button' | 'with-toolbar'
  orientation="horizontal" // 'horizontal' | 'vertical'
  position="center" // 'left' | 'center' | 'right'
  title="Section"
  label="OR"
  icon={<StarIcon />}
  button={<Button size="xs">View All</Button>}
/>
```

#### ListContainer
Container for list items.
```tsx
import { ListContainer } from '@gx2-studio/ui'

<ListContainer 
  items={[<div>Item 1</div>, <div>Item 2</div>]}
  variant="simple" // 'simple' | 'flat' | 'card' | 'separate'
  spacing="md" // 'sm' | 'md' | 'lg'
  as="ul" // 'ul' | 'ol' | 'div'
  fullWidthMobile={true}
/>
```

#### MediaObject
Layout with media and content.
```tsx
import { MediaObject } from '@gx2-studio/ui'

<MediaObject 
  media={<img src="/image.jpg" alt="Media" />}
  title="Title"
  mediaPosition="left" // 'left' | 'right'
  mediaAlignment="center" // 'top' | 'center' | 'bottom'
  spacing="md" // 'sm' | 'md' | 'lg'
  responsive={true}
>
  Content description
</MediaObject>
```

### 8. LISTS & TABLES

#### Table
Data table with sorting and actions.
```tsx
import { Table } from '@gx2-studio/ui'
import type { TableColumn, TableAction } from '@gx2-studio/ui'

interface DataType {
  id: number
  name: string
  email: string
}

const columns: TableColumn<DataType>[] = [
  { key: 'id', label: 'ID', sortable: true, align: 'right' },
  { key: 'name', label: 'Name', sortable: true },
  { 
    key: 'email', 
    label: 'Email',
    render: (value, item) => <a href={`mailto:${value}`}>{value}</a>
  }
]

const actions: TableAction<DataType>[] = [
  { label: 'Edit', onClick: (item) => console.log(item), variant: 'primary' },
  { label: 'Delete', onClick: (item) => console.log(item), variant: 'danger' }
]

<Table 
  columns={columns}
  data={data}
  actions={actions}
  variant="simple" // 'simple' | 'striped' | 'bordered' | 'card'
  size="md" // 'sm' | 'md' | 'lg'
  stickyHeader={false}
  loading={false}
  emptyMessage="No data"
  onSort={(key, direction) => console.log(key, direction)}
  sortKey="name"
  sortDirection="asc"
  selectable={true}
  selectedItems={new Set([0, 1])}
  onSelectItem={(index, selected) => {}}
  onSelectAll={(selected) => {}}
  condensed={false}
  darkMode={false}
  fullWidth={true}
  showVerticalLines={false}
  uppercaseHeaders={false}
  hiddenHeaders={false}
/>
```

#### StackedList
List with avatars and metadata.
```tsx
import { StackedList } from '@gx2-studio/ui'
import type { StackedListItem } from '@gx2-studio/ui'

const items: StackedListItem[] = [
  {
    id: '1',
    title: 'John Doe',
    subtitle: 'Software Engineer',
    description: 'Building great products',
    image: '/avatar.jpg',
    badge: { text: 'Pro', variant: 'success' },
    status: { text: 'Active', online: true },
    metadata: '2 hours ago',
    href: '/profile/1'
  }
]

<StackedList 
  items={items}
  variant="simple" // 'simple' | 'fullWidth' | 'card' | 'narrow'
  spacing="md" // 'sm' | 'md' | 'lg'
  avatarSize="md" // 'sm' | 'md' | 'lg'
  showDividers={true}
  loading={false}
  emptyMessage="No items"
  onItemClick={(item) => console.log(item)}
/>
```

#### Feed
Activity feed timeline.
```tsx
import { Feed } from '@gx2-studio/ui'
import type { FeedItem } from '@gx2-studio/ui'

const items: FeedItem[] = [
  {
    id: '1',
    type: 'comment',
    user: { name: 'John Doe', avatar: '/avatar.jpg' },
    content: 'Posted a comment',
    timestamp: '2 hours ago',
    target: { name: 'Project X', href: '/projects/x' }
  }
]

<Feed 
  items={items}
  variant="simple" // 'simple' | 'with-comments' | 'multiple-types'
  showIcons={true}
/>
```

#### GridList
Grid layout for cards/items.
```tsx
import { GridList } from '@gx2-studio/ui'
import type { GridListItem } from '@gx2-studio/ui'

const items: GridListItem[] = [
  {
    id: '1',
    title: 'Item Title',
    subtitle: 'Subtitle',
    description: 'Description text',
    image: '/image.jpg',
    badge: { text: 'New', color: 'blue' },
    stats: [{ label: 'Views', value: '1.2k' }],
    tags: ['tag1', 'tag2']
  }
]

<GridList 
  items={items}
  variant="simple" // 'simple' | 'contact-cards' | 'small-portraits' | 'horizontal-links' | 'images-details' | 'logos-descriptions' | 'actions-borders'
  columns={3} // 1 | 2 | 3 | 4 | 6
  gap="md" // 'sm' | 'md' | 'lg'
/>
```

### 9. HEADINGS

#### SectionHeading
Section header with actions and tabs.
```tsx
import { SectionHeading } from '@gx2-studio/ui'

<SectionHeading 
  title="Section Title"
  description="Section description"
  variant="simple" // 'simple' | 'with-description' | 'with-action' | 'with-actions' | 'with-tabs' | 'with-actions-and-tabs' | 'with-inline-tabs' | 'with-label' | 'with-badge-and-dropdown'
  action={{ label: 'Add', onClick: () => {}, variant: 'primary' }}
  actions={[{ label: 'Edit', onClick: () => {} }]}
  tabs={[{ name: 'Tab 1', href: '/tab1' }]}
  label="Label"
  badge={{ text: 'Beta', variant: 'success' }}
/>
```

#### PageHeading
Page header with breadcrumbs and metadata.
```tsx
import { PageHeading } from '@gx2-studio/ui'

<PageHeading 
  title="Page Title"
  subtitle="Page subtitle"
  variant="simple" // 'simple' | 'with-actions' | 'with-meta-and-actions' | 'with-avatar-and-actions' | 'with-logo-meta-and-actions' | 'with-actions-and-breadcrumbs' | 'with-meta-actions-and-breadcrumbs'
  meta={[{ label: 'Status', value: 'Active' }]}
  actions={[{ label: 'Edit', onClick: () => {}, variant: 'primary' }]}
  breadcrumbs={[{ label: 'Home', href: '/' }]}
  avatar={{ src: '/avatar.jpg', alt: 'User' }}
  theme="light" // 'light' | 'dark'
/>
```

#### CardHeading
Card header with avatar and actions.
```tsx
import { CardHeading } from '@gx2-studio/ui'

<CardHeading 
  title="Card Title"
  description="Card description"
  variant="simple" // 'simple' | 'with-description' | 'with-action' | 'with-avatar-and-actions' | 'with-description-and-action' | 'with-avatar-meta-and-dropdown'
  action={{ label: 'View', onClick: () => {} }}
  avatar={{ src: '/avatar.jpg', name: 'John' }}
  meta={[{ label: 'Date', value: 'Today' }]}
  dropdownItems={[{ label: 'Edit', onClick: () => {} }]}
/>
```

### 10. OVERLAYS

#### Modal
Dialog overlay window.
```tsx
import { Modal } from '@gx2-studio/ui'

<Modal 
  open={true}
  onClose={() => {}}
  title="Modal Title"
  description="Modal description"
  variant="default" // 'default' | 'alert'
  size="md" // 'sm' | 'md' | 'lg' | 'xl' | 'full'
  position="center" // 'top' | 'center'
  icon={<InfoIcon />}
  iconColor="blue" // 'red' | 'yellow' | 'green' | 'blue' | 'gray'
  actions={[
    { label: 'Cancel', onClick: () => {}, variant: 'secondary' },
    { label: 'Confirm', onClick: () => {}, variant: 'primary', autoFocus: true }
  ]}
  showCloseButton={true}
  closeOnBackdropClick={true}
>
  Modal content
</Modal>
```

#### Drawer
Slide-out panel overlay.
```tsx
import { Drawer } from '@gx2-studio/ui'

<Drawer 
  open={true}
  onClose={() => {}}
  title="Drawer Title"
  description="Drawer description"
  position="right" // 'top' | 'right' | 'bottom' | 'left'
  size="md" // 'sm' | 'md' | 'lg' | 'xl' | 'full'
  variant="default" // 'default' | 'branded' | 'wide' | 'close-outside' | 'sticky-footer' | 'background-overlay'
  showOverlay={true}
  closeOnOverlayClick={true}
  closeOnEscape={true}
  actions={[{ label: 'Save', onClick: () => {}, variant: 'primary' }]}
  brandColor="indigo" // 'indigo' | 'blue' | 'green' | 'purple' | 'red'
>
  Drawer content
</Drawer>
```

#### Notification
Toast notification popup.
```tsx
import { Notification } from '@gx2-studio/ui'

<Notification 
  show={true}
  onClose={() => {}}
  title="Success!"
  description="Operation completed successfully"
  type="success" // 'success' | 'error' | 'warning' | 'info'
  position="top-right" // 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center'
  autoClose={true}
  autoCloseDelay={5000}
  showCloseButton={true}
  actions={[{ label: 'Undo', onClick: () => {}, variant: 'primary' }]}
  avatar={<Avatar src="/user.jpg" />}
  customIcon={<CheckIcon />}
/>
```

### 11. FEEDBACK

#### Alert
Inline alert message.
```tsx
import { Alert } from '@gx2-studio/ui'

<Alert 
  variant="info" // 'success' | 'error' | 'warning' | 'info'
  title="Information"
  description="This is an informational message"
  dismissible={true}
  onDismiss={() => {}}
  icon={true} // or custom icon element
  actions={<Button size="sm">Learn More</Button>}
/>
```

#### EmptyState
Placeholder for empty content.
```tsx
import { EmptyState } from '@gx2-studio/ui'

<EmptyState 
  variant="default" // 'default' | 'card' | 'dashed'
  size="md" // 'sm' | 'md' | 'lg'
  icon={<InboxIcon />}
  title="No items found"
  description="Get started by creating your first item"
  actions={[
    { label: 'Create Item', onClick: () => {}, variant: 'primary', icon: <PlusIcon /> }
  ]}
/>
```

### 12. DATA DISPLAY

#### Stats
Statistics display cards.
```tsx
import { Stats } from '@gx2-studio/ui'
import type { StatItem } from '@gx2-studio/ui'

const stats: StatItem[] = [
  {
    name: 'Total Revenue',
    value: '$45,231',
    unit: 'USD',
    change: '+12.5%',
    changeType: 'increase', // 'increase' | 'decrease' | 'neutral'
    icon: <DollarIcon />
  }
]

<Stats 
  stats={stats}
  variant="simple" // 'simple' | 'cards' | 'dark' | 'trend'
  columns={3} // 1 | 2 | 3 | 4
/>
```

#### DescriptionList
Key-value pairs display.
```tsx
import { DescriptionList } from '@gx2-studio/ui'
import type { DescriptionListItem, Attachment } from '@gx2-studio/ui'

const items: DescriptionListItem[] = [
  { term: 'Name', description: 'John Doe', action: <Button size="xs">Edit</Button> }
]

const attachments: Attachment[] = [
  { name: 'document.pdf', size: '2.5 MB', url: '/download', icon: <FileIcon /> }
]

<DescriptionList 
  items={items}
  attachments={attachments}
  title="Details"
  subtitle="Personal information"
  variant="default" // 'default' | 'card' | 'dark' | 'striped'
  layout="stacked" // 'stacked' | 'horizontal'
/>
```

#### Calendar
Date calendar display.
```tsx
import { Calendar } from '@gx2-studio/ui'
import type { CalendarDay, CalendarEvent } from '@gx2-studio/ui'

const days: CalendarDay[] = [
  {
    date: '2024-01-01',
    isCurrentMonth: true,
    isToday: false,
    isSelected: false,
    events: [{ id: '1', name: 'Meeting', time: '10:00 AM' }]
  }
]

<Calendar 
  days={days}
  meetings={[]}
  selectedDay={null}
  currentMonth="January 2024"
  variant="month" // 'month' | 'week' | 'day' | 'year' | 'borderless-side-by-side' | 'borderless-stacked' | 'double' | 'small-with-meetings'
  onDateSelect={(day) => console.log(day)}
  onPreviousMonth={() => {}}
  onNextMonth={() => {}}
/>
```

### 13. FORMS

#### FormLayout
Complete form with sections.
```tsx
import { FormLayout } from '@gx2-studio/ui'
import type { FormSection } from '@gx2-studio/ui'

const sections: FormSection[] = [
  {
    title: 'Personal Information',
    description: 'Enter your details',
    fields: [
      { id: 'name', name: 'name', label: 'Name', type: 'text', required: true },
      { id: 'email', name: 'email', label: 'Email', type: 'email', required: true }
    ]
  }
]

<FormLayout 
  sections={sections}
  layout="stacked" // 'stacked' | 'two-column' | 'labels-left'
  variant="default" // 'default' | 'card' | 'dark'
  onSubmit={(data) => console.log(data)}
  submitLabel="Save"
  cancelLabel="Cancel"
  showActions={true}
/>
```

#### SignInForm
Authentication form component.
```tsx
import { SignInForm } from '@gx2-studio/ui'

<SignInForm 
  title="Sign In"
  subtitle="Welcome back"
  variant="simple" // 'simple' | 'card' | 'dark' | 'no-labels' | 'split-screen'
  onSubmit={(data) => console.log(data)}
  showRememberMe={true}
  showForgotPassword={true}
  forgotPasswordLabel="Forgot password?"
  onForgotPassword={() => {}}
  submitLabel="Sign In"
  loading={false}
  error="Invalid credentials"
  logoSrc="/logo.png"
  backgroundImage="/bg.jpg"
/>
```

#### ActionPanel
Action prompt panel.
```tsx
import { ActionPanel } from '@gx2-studio/ui'

<ActionPanel 
  title="Complete Your Profile"
  description="Add more information to enhance your profile"
  variant="simple" // 'simple' | 'card' | 'well'
  actionPosition="bottom" // 'bottom' | 'right' | 'top'
  actions={[
    { label: 'Complete Now', onClick: () => {}, variant: 'primary' },
    { label: 'Later', onClick: () => {}, variant: 'secondary' }
  ]}
/>
```

## Type Definitions

### Common Types
```tsx
// Base types used across components
type Size = 'xs' | 'sm' | 'md' | 'lg' | 'xl'
type SimpleSize = 'sm' | 'md' | 'lg'
type BaseColor = 'gray' | 'red' | 'yellow' | 'green' | 'blue' | 'indigo' | 'purple' | 'pink'
type BrandColor = 'indigo' | 'blue' | 'green' | 'purple' | 'red'
type StatusColor = 'success' | 'error' | 'warning' | 'info'
type Position = 'top' | 'right' | 'bottom' | 'left'
type Alignment = 'left' | 'center' | 'right'
type Status = 'online' | 'offline' | 'away' | 'busy'

// Component props base
interface BaseComponentProps {
  className?: string
  children?: ReactNode
}
```

## Best Practices

1. **Type Imports**: Always use type imports for TypeScript types to avoid conflicts:
   ```tsx
   import type { TableColumn, TableAction } from '@gx2-studio/ui'
   ```

2. **Generic Types**: For Table components, always specify the data type:
   ```tsx
   const columns: TableColumn<YourDataType>[] = [...]
   const actions: TableAction<YourDataType>[] = [...]
   ```

3. **Required Props**: Pay attention to required props like `aria-label` for CircularButton

4. **Variant Combinations**: Some components have variant combinations that work better together

5. **Icon Components**: Icons should be React components with optional className prop

6. **Callback Functions**: Most callbacks follow standard patterns:
   - onClick: `() => void` or `(item: T) => void`
   - onChange: `(value: T) => void`

## Common Patterns

### Forms with Validation
```tsx
const [error, setError] = useState('')

<TextInput 
  label="Email"
  value={email}
  onChange={(e) => setEmail(e.target.value)}
  error={error}
  required
/>
```

### Tables with Sorting
```tsx
const [sortKey, setSortKey] = useState('name')
const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')

<Table 
  columns={columns}
  data={sortedData}
  sortKey={sortKey}
  sortDirection={sortDirection}
  onSort={(key, direction) => {
    setSortKey(key)
    setSortDirection(direction)
  }}
/>
```

### Modal with Confirmation
```tsx
const [isOpen, setIsOpen] = useState(false)

<Modal 
  open={isOpen}
  onClose={() => setIsOpen(false)}
  title="Confirm Action"
  variant="alert"
  actions={[
    { label: 'Cancel', onClick: () => setIsOpen(false), variant: 'secondary' },
    { label: 'Confirm', onClick: handleConfirm, variant: 'primary' }
  ]}
>
  Are you sure?
</Modal>
```

## Version Compatibility

- React: >=16.8.0
- TypeScript: >=4.0.0
- Tailwind CSS: >=3.0.0
- Class Variance Authority: Used for variant management

## Notes for AI Agents

1. This library uses Tailwind CSS for styling - ensure Tailwind is configured
2. Components are built with accessibility in mind - maintain ARIA attributes
3. Many components accept ReactNode for icons - any React component works
4. Use the variant system for consistent theming across the application
5. Components are forwardRef-enabled for ref access when needed
6. The library exports both components and their type definitions
7. Always check for required props - TypeScript will enforce these
8. Some components like Table have complex generic types - specify them clearly